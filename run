#!/usr/bin/env php
<?php

define('ACME_DNS_VALIDATION_SUBDOMAIN', '_acme-challenge');
define('ACME_HTTP_VALIDATION_PATH', '/.well-known/acme-challenge');
define('WEBFACTION_API_VERSION', 2);
define('WEBFACTION_ACME_APPLICATION', 'webfaction_acme');
define('WEBFACTION_ACME_WEBSITE', 'webfaction_acme');
define('WEBFACTION_DEPLOY_TIMEOUT_INTERVAL', 10);
define('WEBFACTION_DEPLOY_TIMEOUT_MAXIMUM_ATTEMPTS', 90);
define('WEBFACTION_DEPLOY_TIMEOUT_THRESHOLD', 2);

if (!file_exists(__DIR__.'/config.php')) {
    die("Configuration file is missing, stopping.\n");
}

require_once(__DIR__.'/vendor/autoload.php');

use AcmePhp\Core\Http\Base64SafeEncoder;
use FortyTwoStudio\WebFactionPHP\WebFactionClient;
use FortyTwoStudio\WebFactionPHP\WebFactionException;

$encoder = new Base64SafeEncoder();

$config = include(__DIR__.'/config.php');

$certificateConfig = $config['certificate'];
$webfactionConfig = $config['webfaction'];
$machineConfig = $config['machine'];

foreach (['username', 'password'] as $property) {
    if (empty($machineConfig[$property])) {
        $machineConfig[$property] = $webfactionConfig[$property];
    }
}

if (!file_exists(sprintf('%s/.acmephp/master/private/_account/private.pem', $_SERVER['HOME']))) {
    printf("Setting up ACME account... \n");
    shell_exec(sprintf('php %s/acmephp.phar register %s --quiet --no-interaction', __DIR__, $config['account']));
}

$webfaction = new WebFactionClient(
    $webfactionConfig['username'],
    $webfactionConfig['password'],
    $machineConfig['name'],
    WEBFACTION_API_VERSION
);

$allWebsites = $webfaction->listWebsites();

printf("Setting up preconditions...\n");

try {
    $ips = array_values(array_filter($webfaction->listIps(), function($ip) use($machineConfig) {
        return $ip['machine'] == $machineConfig['name'] && !empty($ip['is_main']);
    }));

    if (empty($ips)) {
        throw new Exception("Primary machine's IP cannot be determined");
    }

    $ip = $ips[0]['ip'];

    $applications = array_values(array_filter($webfaction->listApps(), function($application) {
        return $application['name'] == WEBFACTION_ACME_APPLICATION;
    }));

    if (empty($applications)) {
        printf("  > Creating gateway application '%s'... \n", WEBFACTION_ACME_APPLICATION);
        $application = $webfaction->createApp(WEBFACTION_ACME_APPLICATION, 'static_php70');
    } else {
        printf("  > Gateway application exists, going on... \n", WEBFACTION_ACME_APPLICATION);
    }

    $websites = array_values(array_filter($allWebsites, function($website) use($ip) {
        return $website['ip'] == $ip && $website['name'] == WEBFACTION_ACME_WEBSITE;
    }));

    if (empty($websites)) {
        printf("  > Creating gateway website '%s'... \n", WEBFACTION_ACME_APPLICATION);
        $website = $webfaction->createWebsite(WEBFACTION_ACME_WEBSITE, $ip, false, [], '', [ WEBFACTION_ACME_APPLICATION, '/' ]);
    } else {
        printf("  > Gateway website exists, going on... \n", WEBFACTION_ACME_APPLICATION);
    }

    $ftpConnection = ftp_connect($ip);

    $ftpLogin = ftp_login($ftpConnection, $machineConfig['username'], $machineConfig['password']);

    if (!$ftpConnection || !$ftpLogin) {
        throw new Exception("FTP connection attempt to server failed");
    }
} catch (Exception $e) {
    die(sprintf("  > Aborting due to error/issue caused by: %s.\n", $e->getMessage()));
}

$configuredDomains = [];

$allDomains = $webfaction->listDomains();

foreach ($allDomains as $domain) {
    $configuredDomains[$domain['domain']] = [
        'parent' => $domain['domain'],
        'path' => false
    ];

    foreach ($domain['subdomains'] as $subdomain) {
        $configuredDomains[sprintf('%s.%s', $subdomain, $domain['domain'])] = [
            'parent' => $domain['domain'],
            'path' => $subdomain
        ];
    }
}

$certificates = [];

$allCertificates = $webfaction->listCertificates();
foreach ($allCertificates as $certificate) {
    $certificates[$certificate['name']] = explode(',', $certificate['domains']);
}

$pendingDomains = [];
$confirmedDomains = [];
$domainsToValidate = [];
$redirects = [];

foreach ($config['sites'] as $siteName => $siteConfig) {
    printf("Processing site '%s'...\n", $siteName);

    if (empty($siteConfig['domains'])) {
        throw new Exception("No domains configured");
    }

    if (empty($siteConfig['domain'])) {
        $siteConfig['domain'] = $siteConfig['domains'][0];
    }

    try {
        $domainsToAuthorize = $siteConfig['domains'];
        if (!empty($certificates[$siteName])) {
            $domainsToAuthorize = array_diff($siteConfig['domains'], $certificates[$siteName]);
        }

        $unknownDomains = array_values(array_filter($siteConfig['domains'], function($domain) use($configuredDomains) {
            return !array_key_exists($domain, $configuredDomains);
        }));

        if (!empty($unknownDomains)) {
            throw new Exception(sprintf("Unknown domain(s) %s", implode(', ', $unknownDomains)));
        }

        $unverifiedDomains = [];

        foreach ($domainsToAuthorize as $domain) {
            printf("  > Processing domain '%s'... \n", $domain);

            try {
                $validationMethod = 'http';

                if (!empty($siteConfig['validation'])) {
                    if (!in_array($siteConfig['validation'], ['dns', 'http'])) {
                        throw new Exception('Unknown validation method');
                    }

                    $validationMethod = $siteConfig['validation'];
                } else {
                    $records = trim(shell_exec(sprintf('dig -t ns %s +short', $configuredDomains[$domain]['parent'])));
                    if (preg_match('/ns(\d+)\.webfaction\.com/', $records)) {
                        $validationMethod = 'dns';
                    }
                }

                printf("  > Authorising domain using %s validation... \n", [
                    'dns' => 'DNS',
                    'http' => 'HTTP'
                ][$validationMethod]);

                shell_exec(sprintf('php %s/acmephp.phar authorize %s --no-interaction --solver=%s', __DIR__, $domain, $validationMethod));

                $authorizationPath = sprintf('%s/.acmephp/master/private/%s/authorization_challenge.json', $_SERVER['HOME'], $domain);
                $authorization = json_decode(file_get_contents($authorizationPath));

                if ($validationMethod === 'dns') {
                    $challenge = (new Base64SafeEncoder())->encode(hash('sha256', $authorization->payload, true));
                    $challengeDomain = sprintf('%s.%s', ACME_DNS_VALIDATION_SUBDOMAIN, $domain);

                    if (!array_key_exists($challengeDomain, $configuredDomains)) {
                        $parent = $configuredDomains[$domain]['parent'];

                        $path = ACME_DNS_VALIDATION_SUBDOMAIN;
                        if (!empty($configuredDomains[$domain]['path'])) {
                            $path = sprintf('%s.%s', ACME_DNS_VALIDATION_SUBDOMAIN, $configuredDomains[$domain]['path']);
                        }

                        $webfaction->createDomain($parent, [$path]);

                        $configuredDomains[$challengeDomain] = [
                            'parent' => $parent,
                            'path' => $path,
                        ];
                    }

                    $webfaction->deleteDnsOverride($challengeDomain);

                    $webfaction->createDnsOverride($challengeDomain, '', '', '', '', $challenge);

                    $records = trim(shell_exec(sprintf('dig -t TXT %s +short', $challengeDomain)));

                    if (strpos($records, $challenge) === false) {
                        throw new Exception("DNS records not yet propagated");
                    }
                }

                if ($validationMethod === 'http') {
                    $tokenPath = tempnam(sys_get_temp_dir(), 'token');

                    file_put_contents($tokenPath, $authorization->payload);

                    $tokenUpload = ftp_put($ftpConnection, sprintf('~/webapps/%s/%s', WEBFACTION_ACME_APPLICATION, $authorization->token), $tokenPath, FTP_ASCII);

                    if (!$tokenUpload) {
                        throw new Exception(sprintf("FTP upload of validation token '%s' file failed", $authorization->token));
                    }

                    @unlink($tokenUpload);

                    $matchingWebsites = array_values(array_filter($allWebsites, function($website) use($ip, $domain) {
                        return $website['ip'] == $ip && empty($website['https']) && in_array($domain, $website['subdomains']) && $website['name'] != WEBFACTION_ACME_WEBSITE;
                    }));

                    if (!empty($matchingWebsites)) {
                        $website = $matchingWebsites[0];

                        $apps = array_filter($website['website_apps'], function($app) {
                            return $app[0] == WEBFACTION_ACME_APPLICATION && $app[1] == ACME_HTTP_VALIDATION_PATH;
                        });

                        if (empty($apps)) {
                            $params = [ $website['name'], $website['ip'], false, $website['subdomains'], '' ];
                            $params = array_merge($params, $website['website_apps']);
                            $params[] = [ WEBFACTION_ACME_APPLICATION, ACME_HTTP_VALIDATION_PATH ];

                            call_user_func_array([$webfaction, 'updateWebsite'], $params);
                        }
                    } else {
                        $domainsToValidate[] = $domain;
                    }

                    $url = sprintf('http://%s%s/%s', $domain, ACME_HTTP_VALIDATION_PATH, $authorization->token);

                    $curl = curl_init($url);
                    curl_setopt($curl, CURLOPT_HEADER, true);
                    curl_setopt($curl, CURLOPT_NOBODY, true);
                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_TIMEOUT, 10);
                    curl_exec($curl);

                    $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);

                    curl_close($curl);

                    if (!in_array($httpStatus, [200, 301])) {
                        throw new Exception(sprintf("HTTP request not yet available (%s)", $url));
                    }
                }

                exec(sprintf('php %s/acmephp.phar check --solver=%s --no-test --no-interaction %s >/dev/null 2>&1', __DIR__, $validationMethod, $domain), $output, $outcome);

                if ($outcome !== 0) {
                    throw new Exception("Authorization could not been completed");
                }

                printf("  > Domain has been verified/authorised.\n");
            } catch (Exception $e) {
                printf("  > Issue detected: %s.\n", $e->getMessage());
                $unverifiedDomains[] = $domain;
            }
        }

        $pendingDomains = array_merge($pendingDomains, $unverifiedDomains);

        if (!empty($unverifiedDomains)) {
            throw new Exception("Not all domains could be verified/authorized");
        }

        shell_exec(sprintf('php %s/acmephp.phar request --no-interaction --organization "%s" --email "%s" --locality "%s" --province "%s" --country "%s" %s %s', __DIR__,
            $certificateConfig['organization'],
            $certificateConfig['email'],
            $certificateConfig['locality'],
            $certificateConfig['province'],
            $certificateConfig['country'],
            $siteConfig['domain'],
            implode(' ', array_map(function($alias) {
                return sprintf('-a %s', $alias);
            }, array_diff($siteConfig['domains'], [ $siteConfig['domain'] ])))
        ));

        $keyPem = file_get_contents(sprintf('%s/.acmephp/master/private/%s/private.pem', $_SERVER['HOME'], $siteConfig['domain']));
        $certificatePem = file_get_contents(sprintf('%s/.acmephp/master/certs/%s/cert.pem', $_SERVER['HOME'], $siteConfig['domain']));
        $intermediatePem = file_get_contents(sprintf('%s/.acmephp/master/certs/%s/fullchain.pem', $_SERVER['HOME'], $siteConfig['domain']));

        $matchingCertificates = array_values(array_filter($allCertificates, function($certificate) use($siteName) {
            return $certificate['name'] == $siteName;
        }));

        if (empty($matchingCertificates)) {
            $webfaction->createCertificate($siteName, $certificatePem, $keyPem, $intermediatePem);
        } else {
            $webfaction->updateCertificate($siteName, $certificatePem, $keyPem, $intermediatePem);
        }

        printf("  > Certificate created/updated.\n");

        $domainsToValidate = array_diff($domainsToValidate, $siteConfig['domains']);

        $confirmedDomains = array_merge($confirmedDomains, $siteConfig['domains']);

        if (!empty($siteConfig['redirect'])) {
            foreach ($siteConfig['domains'] as $domain) {
                $redirects[$domain] = $siteConfig['redirect'];
            }
        }
    } catch (\Exception $e) {
        printf("  > Skipping site due to error/issue caused by: %s.\n", $e->getMessage());
    }
}

printf("Setting up managed redirections...\n");

try {
    $conflicts = [];

    foreach (array_values(array_filter($allWebsites, function($website) use($ip) {
        return $website['ip'] == $ip && empty($website['https']) && $website['name'] != WEBFACTION_ACME_WEBSITE;
    })) as $website) {
        $conflicts = array_merge($conflicts, array_intersect(array_values(array_unique(array_merge(array_keys($redirects), array_values($redirects)))), $website['subdomains']));
    }

    if (!empty($conflicts)) {
        foreach ($conflicts as $domain) {
            if (isset($redirects[$domain])) {
                unset($redirects[$domain]);
            }
        }
    }

    if (empty($redirects) && !empty($conflicts)) {
        throw new Exception(sprintf("No domains to redirect due to conflicts with %s", implode(', ', $conflicts)));
    }

    $redirectsWithDestinations = array_filter($redirects, function($redirect) { return is_string($redirect); });

    ob_start();

    printf("<IfModule mod_rewrite.c>\n");
    printf("    RewriteEngine On\n");
    printf("    RewriteCond %%{REQUEST_URI} ^/\.well\-known/acme\-challenge/[0-9a-zA-Z_-]+$\n");
    printf("    RewriteRule ^\.well\-known/acme\-challenge/([0-9a-zA-Z_-]+)$ /$1 [R=301,NC,L]\n");

    foreach ($redirectsWithDestinations as $from => $to) {
        printf("    # Map 'http://%s' -> 'https://%s'\n", $from, $to);
        printf("    RewriteCond %%{HTTP_HOST} ^%s$\n", str_replace('.', '\\.', $from));
        printf("    RewriteCond %%{REQUEST_URI} !^/\.well\-known/acme\-challenge/\n");
        printf("    RewriteRule (.*) https://%s/$1 [R=301,L]\n", $to);
    }

    printf("    # Map domains to their secure counterpart\n");
    printf("    RewriteCond %%{HTTP:X-Forwarded-SSL} !on\n");
    printf("    RewriteCond %%{REQUEST_FILENAME} !-f\n");
    printf("    RewriteCond %%{REQUEST_URI} !^/\.well\-known/acme\-challenge/\n");
    printf("    RewriteRule ^(.*)$ https://%%{HTTP_HOST}%%{REQUEST_URI} [R=301,L]\n");
    printf("</IfModule>");

    $htaccessPath = tempnam(sys_get_temp_dir(), 'htaccess');

    file_put_contents($htaccessPath, ob_get_clean());

    $domainsToRedirect = array_values(array_unique(array_merge(array_keys($redirects), array_values($redirectsWithDestinations))));

    $domains = array_merge($domainsToValidate, $domainsToRedirect);

    printf("  > Update website settings for %d domains...\n", count($domains));

    $website = $webfaction->updateWebsite(WEBFACTION_ACME_APPLICATION, $ip, false, $domains, '', [ WEBFACTION_ACME_APPLICATION, '/' ]);

    $allCertificates = $webfaction->listCertificates();

    printf("  > Uploading .htaccess file to server... \n", WEBFACTION_ACME_APPLICATION);

    $htaccessUpload = ftp_put($ftpConnection, sprintf('~/webapps/%s/.htaccess', WEBFACTION_ACME_APPLICATION), $htaccessPath, FTP_ASCII);

    if (!$htaccessUpload) {
        throw new Exception("FTP upload of .htaccess file failed\n");
    }

    @unlink($htaccessPath);

    printf("  > Setup completed.\n");
} catch (Exception $e) {
    printf("  > Skipping setup because: %s.\n", $e->getMessage());
}

printf("Cleaning up...\n");

foreach ($confirmedDomains as $domain) {
    $challengeDomain = sprintf('%s.%s', ACME_DNS_VALIDATION_SUBDOMAIN, $domain);

    if (array_key_exists($challengeDomain, $configuredDomains)) {
        printf("  > Removing authorization domain for '%s'...\n", $domain);
        $webfaction->deleteDomain($configuredDomains[$domain]['parent'], [$configuredDomains[$domain]['path']]);
    }

    $authorizationPath = sprintf('%s/.acmephp/master/private/%s/authorization_challenge.json', $_SERVER['HOME'], $domain);
    $authorization = json_decode(file_get_contents($authorizationPath));

    $tokenPath = sprintf('~/webapps/%s/%s', WEBFACTION_ACME_APPLICATION, $authorization->token);

    if (ftp_size($ftpConnection, $tokenPath) >= 0) {
        printf("  > Removing authorization file for '%s'...\n", $domain);
        ftp_delete($ftpConnection, $tokenPath);
    }
}

$websitesWithAcmeApp = array_values(array_filter($webfaction->listWebsites(), function($website) use($ip) {
    return $website['ip'] == $ip && empty($website['https']) && !empty(array_filter($website['website_apps'], function($app) {
        return $app[0] == WEBFACTION_ACME_APPLICATION && $app[1] == ACME_HTTP_VALIDATION_PATH;
    }));
}));

foreach ($websitesWithAcmeApp as $website) {
    $pendingDomainsOfWebsite = array_intersect($pendingDomains, $website['subdomains']);
    if (empty($pendingDomainsOfWebsite)) {
        printf("  > Getting rid of gateway application for website '%s'...\n", $website['name']);

        $params = [ $website['name'], $website['ip'], false, $website['subdomains'], '' ];
        $params = array_merge($params, array_filter($website['website_apps'], function($app) {
            return $app[0] != WEBFACTION_ACME_APPLICATION && $app[1] != ACME_HTTP_VALIDATION_PATH;
        }));

        call_user_func_array([$webfaction, 'updateWebsite'], $params);
    }
}

ftp_close($ftpConnection);

printf("All done!\n");